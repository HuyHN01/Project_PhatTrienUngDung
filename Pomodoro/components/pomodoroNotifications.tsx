import * as Notifications from 'expo-notifications';
import { Platform } from "react-native";


export async function schedulePomodoroNotifications(durationMinutes: number) {
    if (Platform.OS === 'ios' || Platform.OS === 'android') {
        await Notifications.scheduleNotificationAsync({
        content: {
        title: '‚è±Ô∏è Pomodoro b·∫Øt ƒë·∫ßu',
        body: `B·∫°n b·∫Øt ƒë·∫ßu phi√™n ${durationMinutes} ph√∫t.`,
        },
        trigger: null,
    });

    await Notifications.scheduleNotificationAsync({
        content: {
        title: '‚úÖ Pomodoro k·∫øt th√∫c',
        body: 'ƒê√£ xong! Ngh·ªâ ng∆°i m·ªôt ch√∫t nh√©!',
        }, trigger: {
            seconds: durationMinutes * 60,
        repeats: false,
        } as Notifications.NotificationTriggerInput,  });
     console.log('Pomodoro notifications scheduled for native.');
  } else {
    console.log('Notifications.scheduleNotificationAsync is not available on web. Skipping pomodoro notifications.');
    // B·∫°n c√≥ th·ªÉ c√¢n nh·∫Øc s·ª≠ d·ª•ng Web Notification API ·ªü ƒë√¢y n·∫øu mu·ªën c√≥ th√¥ng b√°o tr√™n web,
    // nh∆∞ng n√≥ l√† m·ªôt API kh√°c v√† c·∫ßn x·ª≠ l√Ω ri√™ng.
  }
}
export async function scheduleBreakReminder(breakMinutes: number) {
    if (Platform.OS === 'ios' || Platform.OS === 'android') {
        await Notifications.scheduleNotificationAsync({
        content: {
        title: 'üçµ H·∫øt gi·ªù ngh·ªâ',
        body: `H·∫øt ${breakMinutes} ph√∫t ngh·ªâ, quay l·∫°i l√†m vi·ªác th√¥i!`,
        },
        trigger: {
        seconds: breakMinutes * 60,
        repeats: false,
        } as Notifications.NotificationTriggerInput,
    });
     console.log('Break reminder scheduled for native.');
  } else {
    console.log('Notifications.scheduleNotificationAsync is not available on web. Skipping break reminder.');
  }
}